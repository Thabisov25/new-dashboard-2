{"ast":null,"code":"// src/components/AdminProtectedRoute.js\nimport React from'react';import{Navigate}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';// Assuming you handle admin status in AuthContext\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AdminProtectedRoute=_ref=>{let{children}=_ref;const{isAuthenticated,isAdmin}=useAuth();// Checking for both authentication and admin status\n// If the user is not authenticated or not an admin, redirect to admin login\nif(!isAuthenticated||!isAdmin){return/*#__PURE__*/_jsx(Navigate,{to:\"/admin-login\"});}// Otherwise, render the children components (e.g., admin dashboard, etc.)\nreturn children;};export default AdminProtectedRoute;","map":{"version":3,"names":["React","Navigate","useAuth","jsx","_jsx","AdminProtectedRoute","_ref","children","isAuthenticated","isAdmin","to"],"sources":["C:/Users/thabi/Desktop/Web/vincentpt.co.za/src/components/AdminProtectedRoute.js"],"sourcesContent":["// src/components/AdminProtectedRoute.js\r\nimport React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext'; // Assuming you handle admin status in AuthContext\r\n\r\nconst AdminProtectedRoute = ({ children }) => {\r\n  const { isAuthenticated, isAdmin } = useAuth(); // Checking for both authentication and admin status\r\n\r\n  // If the user is not authenticated or not an admin, redirect to admin login\r\n  if (!isAuthenticated || !isAdmin) {\r\n    return <Navigate to=\"/admin-login\" />;\r\n  }\r\n\r\n  // Otherwise, render the children components (e.g., admin dashboard, etc.)\r\n  return children;\r\n};\r\n\r\nexport default AdminProtectedRoute;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,OAASC,OAAO,KAAQ,yBAAyB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAEnD,KAAM,CAAAC,mBAAmB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAAEE,eAAe,CAAEC,OAAQ,CAAC,CAAGP,OAAO,CAAC,CAAC,CAAE;AAEhD;AACA,GAAI,CAACM,eAAe,EAAI,CAACC,OAAO,CAAE,CAChC,mBAAOL,IAAA,CAACH,QAAQ,EAACS,EAAE,CAAC,cAAc,CAAE,CAAC,CACvC,CAEA;AACA,MAAO,CAAAH,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAF,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}