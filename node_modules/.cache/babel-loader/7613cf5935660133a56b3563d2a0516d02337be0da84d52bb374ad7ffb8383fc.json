{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thabi\\\\Desktop\\\\Develop\\\\vincent-student-dashboard\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NotificationContext = /*#__PURE__*/createContext();\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [pushEnabled, setPushEnabled] = useState(false);\n\n  // Request notification permission when the app loads\n  useEffect(() => {\n    if ('Notification' in window) {\n      if (Notification.permission === 'default') {\n        // Request permission if the user hasn't made a decision yet\n        Notification.requestPermission().then(permission => {\n          if (permission === 'granted') {\n            setPushEnabled(true);\n            console.log('Notification permission granted.');\n          } else if (permission === 'denied') {\n            setPushEnabled(false);\n            console.log('Notification permission denied.');\n          }\n        });\n      } else if (Notification.permission === 'granted') {\n        setPushEnabled(true);\n        console.log('Notifications are already enabled.');\n      } else if (Notification.permission === 'denied') {\n        setPushEnabled(false);\n        console.log('Notifications are blocked. User must change settings to enable.');\n      }\n    }\n  }, []);\n\n  // Toggle Push Notifications (on/off)\n  const togglePushNotifications = isEnabled => {\n    setPushEnabled(isEnabled);\n    if (isEnabled) {\n      console.log('Push notifications enabled.');\n      // Add logic to subscribe to push notifications here\n    } else {\n      console.log('Push notifications disabled.');\n      // Add logic to unsubscribe from push notifications here\n    }\n  };\n\n  // Function to send notifications\n  const sendNotification = (title, body) => {\n    if (pushEnabled && 'Notification' in window && Notification.permission === 'granted') {\n      new Notification(title, {\n        body: body,\n        icon: '/logo.png' // Use your app logo or any relevant icon\n      });\n    } else {\n      console.log('Push notifications are not enabled.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      pushEnabled,\n      togglePushNotifications,\n      sendNotification\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"g+lm6ZL7dVLSdMm5B0NIrvXkxpY=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","NotificationContext","NotificationProvider","children","_s","pushEnabled","setPushEnabled","window","Notification","permission","requestPermission","then","console","log","togglePushNotifications","isEnabled","sendNotification","title","body","icon","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thabi/Desktop/Develop/vincent-student-dashboard/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Create the context\r\nexport const NotificationContext = createContext();\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [pushEnabled, setPushEnabled] = useState(false);\r\n\r\n  // Request notification permission when the app loads\r\n  useEffect(() => {\r\n    if ('Notification' in window) {\r\n      if (Notification.permission === 'default') {\r\n        // Request permission if the user hasn't made a decision yet\r\n        Notification.requestPermission().then(permission => {\r\n          if (permission === 'granted') {\r\n            setPushEnabled(true);\r\n            console.log('Notification permission granted.');\r\n          } else if (permission === 'denied') {\r\n            setPushEnabled(false);\r\n            console.log('Notification permission denied.');\r\n          }\r\n        });\r\n      } else if (Notification.permission === 'granted') {\r\n        setPushEnabled(true);\r\n        console.log('Notifications are already enabled.');\r\n      } else if (Notification.permission === 'denied') {\r\n        setPushEnabled(false);\r\n        console.log('Notifications are blocked. User must change settings to enable.');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Toggle Push Notifications (on/off)\r\n  const togglePushNotifications = (isEnabled) => {\r\n    setPushEnabled(isEnabled);\r\n    if (isEnabled) {\r\n      console.log('Push notifications enabled.');\r\n      // Add logic to subscribe to push notifications here\r\n    } else {\r\n      console.log('Push notifications disabled.');\r\n      // Add logic to unsubscribe from push notifications here\r\n    }\r\n  };\r\n\r\n  // Function to send notifications\r\n  const sendNotification = (title, body) => {\r\n    if (pushEnabled && 'Notification' in window && Notification.permission === 'granted') {\r\n      new Notification(title, {\r\n        body: body,\r\n        icon: '/logo.png',  // Use your app logo or any relevant icon\r\n      });\r\n    } else {\r\n      console.log('Push notifications are not enabled.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ pushEnabled, togglePushNotifications, sendNotification }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,mBAAmB,gBAAGL,aAAa,CAAC,CAAC;AAElD,OAAO,MAAMM,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACAC,SAAS,CAAC,MAAM;IACd,IAAI,cAAc,IAAIS,MAAM,EAAE;MAC5B,IAAIC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;QACzC;QACAD,YAAY,CAACE,iBAAiB,CAAC,CAAC,CAACC,IAAI,CAACF,UAAU,IAAI;UAClD,IAAIA,UAAU,KAAK,SAAS,EAAE;YAC5BH,cAAc,CAAC,IAAI,CAAC;YACpBM,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;UACjD,CAAC,MAAM,IAAIJ,UAAU,KAAK,QAAQ,EAAE;YAClCH,cAAc,CAAC,KAAK,CAAC;YACrBM,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;UAChD;QACF,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIL,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;QAChDH,cAAc,CAAC,IAAI,CAAC;QACpBM,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACnD,CAAC,MAAM,IAAIL,YAAY,CAACC,UAAU,KAAK,QAAQ,EAAE;QAC/CH,cAAc,CAAC,KAAK,CAAC;QACrBM,OAAO,CAACC,GAAG,CAAC,iEAAiE,CAAC;MAChF;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,uBAAuB,GAAIC,SAAS,IAAK;IAC7CT,cAAc,CAACS,SAAS,CAAC;IACzB,IAAIA,SAAS,EAAE;MACbH,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C;IACF,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3C;IACF;EACF,CAAC;;EAED;EACA,MAAMG,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAK;IACxC,IAAIb,WAAW,IAAI,cAAc,IAAIE,MAAM,IAAIC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;MACpF,IAAID,YAAY,CAACS,KAAK,EAAE;QACtBC,IAAI,EAAEA,IAAI;QACVC,IAAI,EAAE,WAAW,CAAG;MACtB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLP,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IACpD;EACF,CAAC;EAED,oBACEb,OAAA,CAACC,mBAAmB,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,WAAW;MAAES,uBAAuB;MAAEE;IAAiB,CAAE;IAAAb,QAAA,EAC7FA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAACrB,EAAA,CAxDWF,oBAAoB;AAAAwB,EAAA,GAApBxB,oBAAoB;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}