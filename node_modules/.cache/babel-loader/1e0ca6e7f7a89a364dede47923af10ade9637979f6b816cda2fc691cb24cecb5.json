{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thabi\\\\Desktop\\\\Develop\\\\vincent-student-dashboard\\\\src\\\\components\\\\AdminProtectedRoute.js\",\n  _s = $RefreshSig$();\n// src/components/AdminProtectedRoute.js\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext'; // Assuming you handle admin status in AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    isAdmin\n  } = useAuth(); // Checking for both authentication and admin status\n\n  // If the user is not authenticated or not an admin, redirect to admin login\n  if (!isAuthenticated || !isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/admin-login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Otherwise, render the children components (e.g., admin dashboard, etc.)\n  return children;\n};\n_s(AdminProtectedRoute, \"fipPGOM0smy0Bu0bk5gKKlYM6dM=\", false, function () {\n  return [useAuth];\n});\n_c = AdminProtectedRoute;\nexport default AdminProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useAuth","jsxDEV","_jsxDEV","AdminProtectedRoute","children","_s","isAuthenticated","isAdmin","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thabi/Desktop/Develop/vincent-student-dashboard/src/components/AdminProtectedRoute.js"],"sourcesContent":["// src/components/AdminProtectedRoute.js\r\nimport React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext'; // Assuming you handle admin status in AuthContext\r\n\r\nconst AdminProtectedRoute = ({ children }) => {\r\n  const { isAuthenticated, isAdmin } = useAuth(); // Checking for both authentication and admin status\r\n\r\n  // If the user is not authenticated or not an admin, redirect to admin login\r\n  if (!isAuthenticated || !isAdmin) {\r\n    return <Navigate to=\"/admin-login\" />;\r\n  }\r\n\r\n  // Otherwise, render the children components (e.g., admin dashboard, etc.)\r\n  return children;\r\n};\r\n\r\nexport default AdminProtectedRoute;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,yBAAyB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM;IAAEC,eAAe;IAAEC;EAAQ,CAAC,GAAGP,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEhD;EACA,IAAI,CAACM,eAAe,IAAI,CAACC,OAAO,EAAE;IAChC,oBAAOL,OAAA,CAACH,QAAQ;MAACS,EAAE,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACvC;;EAEA;EACA,OAAOR,QAAQ;AACjB,CAAC;AAACC,EAAA,CAVIF,mBAAmB;EAAA,QACcH,OAAO;AAAA;AAAAa,EAAA,GADxCV,mBAAmB;AAYzB,eAAeA,mBAAmB;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}