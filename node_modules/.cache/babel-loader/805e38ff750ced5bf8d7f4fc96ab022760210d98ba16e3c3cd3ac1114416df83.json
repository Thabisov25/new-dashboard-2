{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thabi\\\\Desktop\\\\Develop\\\\vincent-student-dashboard\\\\src\\\\components\\\\FormulaSheets.js\",\n  _s = $RefreshSig$();\n// src/components/FormulaSheets.js\nimport React, { useState } from 'react';\nimport { Box, Typography, List, ListItemButton, ListItemText, Collapse, TextField } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { MathJax, MathJaxContext } from 'better-react-mathjax'; // Import MathJax\nimport formulasData from '../data/formulas.json'; // Import the JSON file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormulaSheets = () => {\n  _s();\n  const [selectedFormula, setSelectedFormula] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Toggle the selected formula when clicking on its name\n  const handleFormulaClick = formulaName => {\n    setSelectedFormula(selectedFormula === formulaName ? null : formulaName);\n  };\n\n  // Filter formulas based on the search term\n  const filteredFormulas = formulasData.formulas.filter(formula => formula.name.toLowerCase().includes(searchTerm.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(MathJaxContext, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        p: 3,\n        backgroundColor: '#2c2c2c',\n        // Dark background matching Flashcards component\n        color: '#fff',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: 3 // Space between components\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          color: 'teal',\n          fontWeight: 'bold',\n          letterSpacing: '2px',\n          fontSize: '1.5rem' // Similar styling to the Flashcards title\n        },\n        gutterBottom: true,\n        children: \"Formula Dictionary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Search for a formula\",\n        variant: \"outlined\",\n        fullWidth: true,\n        sx: {\n          mb: 3,\n          maxWidth: 600,\n          input: {\n            color: '#fff'\n          },\n          // White text for input\n          '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n              borderColor: 'teal' // Teal border\n            },\n            '&:hover fieldset': {\n              borderColor: '#008080' // Darker teal on hover\n            },\n            '&.Mui-focused fieldset': {\n              borderColor: '#008080' // Darker teal when focused\n            }\n          },\n          '& label': {\n            color: '#ffffff'\n          },\n          // White label text\n          '& .MuiInputBase-root': {\n            backgroundColor: '#1e1e1e',\n            borderRadius: '8px'\n          }\n        },\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledList, {\n        children: filteredFormulas.length > 0 ? filteredFormulas.map((formula, index) => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(ListItemButton, {\n            onClick: () => handleFormulaClick(formula.name),\n            sx: {\n              color: '#008080',\n              // Teal color for formula name\n              backgroundColor: selectedFormula === formula.name ? '#444' : '#333',\n              // Dark grey for selected items\n              borderRadius: '8px',\n              '&:hover': {\n                backgroundColor: '#444'\n              } // Hover effect similar to Flashcards\n            },\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: formula.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n            in: selectedFormula === formula.name,\n            timeout: \"auto\",\n            unmountOnExit: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                p: 2,\n                color: '#fff',\n                backgroundColor: '#1e1e1e',\n                borderRadius: 1\n              },\n              children: /*#__PURE__*/_jsxDEV(MathJax, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  children: [\"Formula: \", `\\\\( ${formula.formula} \\\\)`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Breakdown:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 25\n                  }, this), Object.entries(formula.breakdown).map(([key, value]) => /*#__PURE__*/_jsxDEV(Typography, {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: [key, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 107,\n                      columnNumber: 29\n                    }, this), \" \", value]\n                  }, key, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 27\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Example Problem:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 112,\n                    columnNumber: 25\n                  }, this), \" \", formula.example.problem]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Solution:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 25\n                  }, this), formula.example.solution.map((step, i) => /*#__PURE__*/_jsxDEV(Typography, {\n                    children: `\\\\( ${step} \\\\)`\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 117,\n                    columnNumber: 27\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            color: '#fff'\n          },\n          children: \"No formulas found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n// Styled List Component for a clean, compact layout\n_s(FormulaSheets, \"SJ8t/1h9gbENEoxPJTurqN6/s04=\");\n_c = FormulaSheets;\nconst StyledList = styled(List)({\n  width: '100%',\n  maxWidth: 600,\n  backgroundColor: '#2c2c2c',\n  // Match dark background theme\n  borderRadius: '8px'\n});\n_c2 = StyledList;\nexport default FormulaSheets;\nvar _c, _c2;\n$RefreshReg$(_c, \"FormulaSheets\");\n$RefreshReg$(_c2, \"StyledList\");","map":{"version":3,"names":["React","useState","Box","Typography","List","ListItemButton","ListItemText","Collapse","TextField","styled","MathJax","MathJaxContext","formulasData","jsxDEV","_jsxDEV","FormulaSheets","_s","selectedFormula","setSelectedFormula","searchTerm","setSearchTerm","handleFormulaClick","formulaName","filteredFormulas","formulas","filter","formula","name","toLowerCase","includes","children","sx","flexGrow","p","backgroundColor","color","minHeight","display","flexDirection","alignItems","gap","variant","fontWeight","letterSpacing","fontSize","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","label","fullWidth","mb","maxWidth","input","borderColor","borderRadius","value","onChange","e","target","StyledList","length","map","index","onClick","primary","in","timeout","unmountOnExit","mt","Object","entries","breakdown","key","example","problem","solution","step","i","_c","width","_c2","$RefreshReg$"],"sources":["C:/Users/thabi/Desktop/Develop/vincent-student-dashboard/src/components/FormulaSheets.js"],"sourcesContent":["// src/components/FormulaSheets.js\r\nimport React, { useState } from 'react';\r\nimport { Box, Typography, List, ListItemButton, ListItemText, Collapse, TextField } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport { MathJax, MathJaxContext } from 'better-react-mathjax'; // Import MathJax\r\nimport formulasData from '../data/formulas.json'; // Import the JSON file\r\n\r\nconst FormulaSheets = () => {\r\n  const [selectedFormula, setSelectedFormula] = useState(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  // Toggle the selected formula when clicking on its name\r\n  const handleFormulaClick = (formulaName) => {\r\n    setSelectedFormula(selectedFormula === formulaName ? null : formulaName);\r\n  };\r\n\r\n  // Filter formulas based on the search term\r\n  const filteredFormulas = formulasData.formulas.filter((formula) =>\r\n    formula.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <MathJaxContext>\r\n      <Box\r\n        sx={{\r\n          flexGrow: 1,\r\n          p: 3,\r\n          backgroundColor: '#2c2c2c', // Dark background matching Flashcards component\r\n          color: '#fff',\r\n          minHeight: '100vh',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          gap: 3, // Space between components\r\n        }}\r\n      >\r\n        <Typography\r\n          variant=\"h4\"\r\n          sx={{\r\n            color: 'teal',\r\n            fontWeight: 'bold',\r\n            letterSpacing: '2px',\r\n            fontSize: '1.5rem', // Similar styling to the Flashcards title\r\n          }}\r\n          gutterBottom\r\n        >\r\n          Formula Dictionary\r\n        </Typography>\r\n\r\n        {/* Search Bar */}\r\n        <TextField\r\n          label=\"Search for a formula\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          sx={{\r\n            mb: 3,\r\n            maxWidth: 600,\r\n            input: { color: '#fff' }, // White text for input\r\n            '& .MuiOutlinedInput-root': {\r\n              '& fieldset': {\r\n                borderColor: 'teal', // Teal border\r\n              },\r\n              '&:hover fieldset': {\r\n                borderColor: '#008080', // Darker teal on hover\r\n              },\r\n              '&.Mui-focused fieldset': {\r\n                borderColor: '#008080', // Darker teal when focused\r\n              },\r\n            },\r\n            '& label': { color: '#ffffff' }, // White label text\r\n            '& .MuiInputBase-root': {\r\n              backgroundColor: '#1e1e1e',\r\n              borderRadius: '8px',\r\n            },\r\n          }}\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n\r\n        {/* Display Filtered Formula List */}\r\n        <StyledList>\r\n          {filteredFormulas.length > 0 ? (\r\n            filteredFormulas.map((formula, index) => (\r\n              <Box key={index} sx={{ mb: 2 }}>\r\n                <ListItemButton\r\n                  onClick={() => handleFormulaClick(formula.name)}\r\n                  sx={{\r\n                    color: '#008080', // Teal color for formula name\r\n                    backgroundColor: selectedFormula === formula.name ? '#444' : '#333', // Dark grey for selected items\r\n                    borderRadius: '8px',\r\n                    '&:hover': { backgroundColor: '#444' }, // Hover effect similar to Flashcards\r\n                  }}\r\n                >\r\n                  <ListItemText primary={formula.name} />\r\n                </ListItemButton>\r\n                <Collapse in={selectedFormula === formula.name} timeout=\"auto\" unmountOnExit>\r\n                  <Box sx={{ p: 2, color: '#fff', backgroundColor: '#1e1e1e', borderRadius: 1 }}>\r\n                    {/* Wrap everything in MathJax */}\r\n                    <MathJax>\r\n                      <Typography variant=\"body1\">\r\n                        Formula: {`\\\\( ${formula.formula} \\\\)`}\r\n                      </Typography>\r\n                      <Typography variant=\"body1\" sx={{ mt: 1 }}>\r\n                        <strong>Breakdown:</strong>\r\n                        {Object.entries(formula.breakdown).map(([key, value]) => (\r\n                          <Typography key={key}>\r\n                            <strong>{key}:</strong> {value}\r\n                          </Typography>\r\n                        ))}\r\n                      </Typography>\r\n                      <Typography variant=\"body1\" sx={{ mt: 1 }}>\r\n                        <strong>Example Problem:</strong> {formula.example.problem}\r\n                      </Typography>\r\n                      <Typography variant=\"body1\">\r\n                        <strong>Solution:</strong>\r\n                        {formula.example.solution.map((step, i) => (\r\n                          <Typography key={i}>\r\n                            {`\\\\( ${step} \\\\)`}\r\n                          </Typography>\r\n                        ))}\r\n                      </Typography>\r\n                    </MathJax>\r\n                  </Box>\r\n                </Collapse>\r\n              </Box>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"body1\" sx={{ color: '#fff' }}>No formulas found</Typography>\r\n          )}\r\n        </StyledList>\r\n      </Box>\r\n    </MathJaxContext>\r\n  );\r\n};\r\n\r\n// Styled List Component for a clean, compact layout\r\nconst StyledList = styled(List)({\r\n  width: '100%',\r\n  maxWidth: 600,\r\n  backgroundColor: '#2c2c2c', // Match dark background theme\r\n  borderRadius: '8px',\r\n});\r\n\r\nexport default FormulaSheets;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}